name: Build

on:
  push:
    branches:
      - master
    paths:
      - "PKGBUILD/**"
      - "xmcl-runtime/**"
      - "xmcl-runtime-api/**"
      - "xmcl-keystone-ui/**"
      - "xmcl-electron-app/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - ".github/**"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: pnpm/action-setup@v4
        with:
          version: 9.3.0
      - name: Fix node-gyp and Python
        if: ${{ runner.os == 'macOS' }}
        run: python3 -m pip install --break-system-packages --user packaging setuptools
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - name: Install
        run: pnpm install
      - name: Restore cached Electron
        id: cache-electron
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-build-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-electron-build-
      - name: Build
        run: |
          pnpm run --prefix xmcl-keystone-ui build
          pnpm run --prefix xmcl-electron-app build:all
        env:
          BUILD_NUMBER: ${{ github.run_number }}
          NODE_OPTIONS: --max-old-space-size=32768
          NODE_ENV: production
          CURSEFORGE_API_KEY: ${{ secrets.CURSEFORGE_API_TOKEN }}
          PUBLISHER: CN=SignPath Foundation, O=SignPath Foundation, L=Lewes, S=Delaware, C=US
      - name: Upload Source Maps
        if: ${{ runner.os == 'Windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: sourcemap
          path: |
            xmcl-electron-app/dist/*.js.map
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ runner.os }}
          path: |
            xmcl-electron-app/build/output/
      - name: Save cached Electron
        if: steps.cache-electron.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-build-${{ hashFiles('**/pnpm-lock.yaml') }}

  build-arch:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.head_commit.message, 'chore(release)') }}
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    container: archlinux:latest

    steps:
      - name: Install Dependencies
        run: |
          pacman -Syu --noconfirm base-devel nodejs npm

      - name: Install Git
        run: |
          pacman -S --noconfirm git

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Download Ubuntu Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-Linux
          path: ./PKGBUILD/

      - name: Extract version
        id: version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build Package
        run: |
          cd ./PKGBUILD/
          useradd builder -m
          chown -R builder:builder ./

          find . -name "*amd64.deb" -exec cp {} xmcl-${{ steps.version.outputs.version }}-amd64.deb \;
          find . -name "*arm64.deb" -exec cp {} xmcl-${{ steps.version.outputs.version }}-arm64.deb \;

          sed -i "s/pkgver=.*/pkgver=${{ steps.version.outputs.version }}/" PKGBUILD
          sed -i "s/arch=(.*)/arch=('${{ matrix.arch }}')/" PKGBUILD

          su builder -c 'makepkg -sf --noconfirm'

          if [ -f *.pkg.tar.zst ]; then
            for f in *.pkg.tar.zst; do
              mv "$f" "xmcl-launcher-${{ steps.version.outputs.version }}-${{ matrix.arch }}.pacman"
            done
          fi

      - name: Upload Arch Package
        uses: actions/upload-artifact@v4
        with:
          name: build-Arch-${{ matrix.arch }}
          path: ./PKGBUILD/*.pacman

  prepare-release:
    runs-on: ubuntu-latest
    needs:
      - build
    if: ${{ !startsWith(github.event.head_commit.message, 'chore(release)') }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 9.3.0
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install
        run: |
          pnpm install --filter ./.github/actions
      - name: Bump Version
        id: version
        uses: Voxelum/semantic-version-bump-action@xmcl
        with:
          packages: |
            ./xmcl-keystone-ui
            ./xmcl-runtime
            ./xmcl-runtime-api
          root: "."
          stage: "prepare"
      - name: Update Lock File
        if: ${{ steps.version.outputs.release == 'true' }}
        run: pnpm i --lockfile-only
      - name: Create Pull Request
        if: ${{ steps.version.outputs.release == 'true' }}
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): version ${{ steps.version.outputs.version }}"
          title: Prepare Release ${{ steps.version.outputs.version }}
          body: ${{ steps.version.outputs.changelog }}
          reviewers: ci010
          assignees: ci010
          branch: prepare-release

  release:
    if: startsWith(github.event.head_commit.message, 'chore(release)')
    runs-on: ubuntu-latest
    needs:
      - build
      - build-arch
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: pnpm/action-setup@v4
        with:
          version: 9.3.0
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - name: Install
        run: |
          pnpm install --filter action-*
      - name: Download Build
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true
          path: build
      - name: Prepare Release
        id: prepare_release
        uses: Voxelum/semantic-version-bump-action@xmcl
        with:
          packages: |
            ./xmcl-keystone-ui
            ./xmcl-runtime
            ./xmcl-runtime-api
          root: "."
          stage: "release"
      - name: Create Tag
        run: |
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/voxelum/x-minecraft-launcher.git"
          git config user.name ci010
          git config user.email cijhn@hotmail.com
          git tag -f ${{ steps.prepare_release.outputs.tag }}
          git push origin tag ${{ steps.prepare_release.outputs.tag }} -f
      - name: Draft Release
        uses: voxelum/create-release@xmcl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_release.outputs.tag }}
          release_name: ${{ steps.prepare_release.outputs.tag }}
          draft: true
          prerelease: false
          body: ${{ steps.release_note.outputs.body }}
          asset_dir_path: ./build
